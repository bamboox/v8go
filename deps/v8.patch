diff --git a/src/codegen/compiler.cc b/src/codegen/compiler.cc
index 0a95368d3b9..c7e470591b4 100644
--- a/src/codegen/compiler.cc
+++ b/src/codegen/compiler.cc
@@ -3651,7 +3651,10 @@ MaybeHandle<SharedFunctionInfo> GetSharedFunctionInfoForScriptImpl(
     ScriptCompiler::CompilationDetails* compilation_details) {
   ScriptCompileTimerScope compile_timer(isolate, no_cache_reason,
                                         compilation_details);
-
+  if (compile_options & ScriptCompiler::kConsumeCodeCache) {
+    // 创建空字符串作为替代
+    source = isolate->factory()->empty_string();
+  }
   if (compile_options & ScriptCompiler::kConsumeCodeCache) {
     // Have to have exactly one of cached_data or deserialize_task.
     DCHECK(cached_data || deserialize_task);
diff --git a/src/snapshot/code-serializer.cc b/src/snapshot/code-serializer.cc
index 0f4bea1f0ae..e008dd4c399 100644
--- a/src/snapshot/code-serializer.cc
+++ b/src/snapshot/code-serializer.cc
@@ -454,13 +454,15 @@ MaybeHandle<SharedFunctionInfo> CodeSerializer::Deserialize(
     timer.Start();
   }
 
+
   HandleScope scope(isolate);
 
   SerializedCodeSanityCheckResult sanity_check_result =
       SerializedCodeSanityCheckResult::kSuccess;
   const SerializedCodeData scd = SerializedCodeData::FromCachedData(
       isolate, cached_data,
-      SerializedCodeData::SourceHash(source, script_details.origin_options),
+      //SerializedCodeData::SourceHash(source, script_details.origin_options),
+      ScriptData::CachedData::SourceHash::Empty(),
       &sanity_check_result);
   if (sanity_check_result != SerializedCodeSanityCheckResult::kSuccess) {
     if (v8_flags.profile_deserialization) {
@@ -493,6 +495,8 @@ MaybeHandle<SharedFunctionInfo> CodeSerializer::Deserialize(
     merge.SetUpOnMainThread(isolate, cached_script);
     CHECK(merge.HasPendingBackgroundWork());
     Handle<Script> new_script = handle(Cast<Script>(result->script()), isolate);
+    // 如果源码为空，跳过源码关联操作
+    new_script->set_source(*isolate->factory()->empty_string());
     merge.BeginMergeInBackground(isolate->AsLocalIsolate(), new_script);
     CHECK(merge.HasPendingForegroundWork());
     result = merge.CompleteMergeInForeground(isolate, new_script);
@@ -700,18 +704,11 @@ SerializedCodeData::SerializedCodeData(const std::vector<uint8_t>* payload,
 SerializedCodeSanityCheckResult SerializedCodeData::SanityCheck(
     uint32_t expected_ro_snapshot_checksum,
     uint32_t expected_source_hash) const {
-  SerializedCodeSanityCheckResult result =
-      SanityCheckWithoutSource(expected_ro_snapshot_checksum);
-  if (result != SerializedCodeSanityCheckResult::kSuccess) return result;
-  return SanityCheckJustSource(expected_source_hash);
+    return SerializedCodeSanityCheckResult::kSuccess;
 }
 
 SerializedCodeSanityCheckResult SerializedCodeData::SanityCheckJustSource(
     uint32_t expected_source_hash) const {
-  uint32_t source_hash = GetHeaderValue(kSourceHashOffset);
-  if (source_hash != expected_source_hash) {
-    return SerializedCodeSanityCheckResult::kSourceMismatch;
-  }
   return SerializedCodeSanityCheckResult::kSuccess;
 }
 
diff --git a/src/snapshot/object-deserializer.cc b/src/snapshot/object-deserializer.cc
index 77ccb1cd8b8..b45af784e6a 100644
--- a/src/snapshot/object-deserializer.cc
+++ b/src/snapshot/object-deserializer.cc
@@ -24,7 +24,9 @@ ObjectDeserializer::DeserializeSharedFunctionInfo(
     Isolate* isolate, const SerializedCodeData* data, Handle<String> source) {
   ObjectDeserializer d(isolate, data);
 
-  d.AddAttachedObject(source);
+  //d.AddAttachedObject(source);
+  d.AddAttachedObject(isolate->factory()->empty_string());
+
 
   Handle<HeapObject> result;
   return d.Deserialize().ToHandle(&result) ? Cast<SharedFunctionInfo>(result)

